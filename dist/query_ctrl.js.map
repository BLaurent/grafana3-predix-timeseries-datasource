{"version":3,"sources":["../src/query_ctrl.js"],"names":["angular","_","QueryCtrl","PredixTimeSeriesDatasourceQueryCtrl","$scope","$injector","templateSrv","uiSegmentSrv","target","attributes","filters","aggregations","groups","aggregator_types","name","description","datasource","getMetrics","then","transformToSegments","getAttributesForMetric","metric","getAttributeValues","_this","x","Promise","resolve","reject","mapToTextAndDescription","result","map","d","i","text","expandable","console","log","splice","indexOf","panelCtrl","refresh","push","value","measurements","qualities","type","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import angular from \"angular\";\nimport _ from \"lodash\";\nimport {\n    QueryCtrl\n} from 'app/plugins/sdk';\nimport './css/query-editor.css!';\n\nexport class PredixTimeSeriesDatasourceQueryCtrl extends QueryCtrl {\n    constructor($scope, $injector, templateSrv, uiSegmentSrv) {\n        super($scope, $injector);\n        this.uiSegmentSrv = uiSegmentSrv;\n        this.templateSrv = templateSrv;\n        this.target.attributes = [];\n        this.target.filters = [];\n        this.target.aggregations = [];\n        this.target.groups = [];\n        this.aggregator_types = [\n          {\n            name: \"avg\",\n            description: \"Returns the average of the values.\",\n          },\n          {\n            name: \"count\",\n            description: \"Counts the number of data points.\",\n          },\n          {\n            name: \"dev\",\n            description: \"Returns the standard deviation of the time series.\",\n          },\n          {\n            name: \"diff\",\n            description: \"Calculates the difference between successive data points.\",\n          },\n          {\n            name: \"div\",\n            description: \"Returns each data point divided by the specified value of the divisor property.\",\n          },\n          {\n            name: \"gaps\",\n            description: \"Marks gaps in data with a null data point, according to the sampling rate.\",\n          },\n          {\n            name: \"interpolate\",\n            description: \"Does linear interpolation for the chosen window.\",\n          },\n          {\n            name: \"least_squares\",\n            description: \"Returns two points that represent the best fit line through the set of data points for the range.\",\n          },\n          {\n            name: \"max\",\n            description: \"Inherits from the range aggregator. Returns the most recent largest value.\",\n          },\n          {\n            name: \"min\",\n            description: \"Returns the most recent smallest value.\",\n          },\n          {\n            name: \"percentile\",\n            description: \"Calculates a probability distribution, and returns the specified percentile for the distribution. The “percentile” value is defined as 0 < percentile <= 1 where .5 is 50% and 1 is 100%.\",\n          },\n          {\n            name: \"rate\",\n            description: \"Returns the rate of change between a pair of data points.\",\n          },\n          {\n            name: \"sampler\",\n            description: \"Calculates the sampling rate of change for the data points.\",\n          },\n          {\n            name: \"scale\",\n            description: \"Scales each data point by a factor.\",\n          },\n          {\n            name: \"sum\",\n            description: \"Returns the sum of all values.\",\n          },\n          {\n            name: \"trendmode\",\n            description: \"Returns the min and max values within each interval.\",\n          },\n\n        ];\n    }\n\n    getMetrics() {\n        return this.datasource.getMetrics()\n            .then(this.uiSegmentSrv.transformToSegments(true));\n    }\n\n    getAttributesForMetric() {\n      return this.datasource.getAttributesForMetric(this.target.metric)\n          .then(this.uiSegmentSrv.transformToSegments(true));\n    }\n\n    getAttributeValues(name) {\n      if (name) {\n        return this.datasource.getAttributeValues(this.target.metric, name)\n            .then(this.uiSegmentSrv.transformToSegments(true));\n      }\n    }\n\n    getAggregationTypes() {\n      var _this = this;\n      var x = new Promise(function(resolve, reject) {\n        resolve(_this.mapToTextAndDescription(_this.aggregator_types));\n      });\n      return x.then(this.uiSegmentSrv.transformToSegments(true));\n    }\n\n    mapToTextAndDescription(result) {\n        return _.map(result, function(d,i) {\n            return { text: d.name, expandable: false, description: d.description};\n        });\n    }\n\n    removeAttribute(name) {\n        console.log(\"Removing attribute\");\n        if (this.target.attributes) {\n            this.target.attributes.splice(this.target.attributes.indexOf(name), 1);\n            this.panelCtrl.refresh();\n        }\n    }\n\n    addAttribute() {\n        console.log(\"Add attribute...\");\n        this.target.attributes.push({\n            name: null,\n            value: null\n        });\n    }\n\n    addFilter() {\n        console.log(\"Add Filter...\");\n        this.target.filters.push({\n            attributes: {},\n            measurements: {},\n            qualities: {},\n        });\n    }\n\n    addGroup() {\n        console.log(\"Add Group...\");\n        this.target.groups.push({\n            name: null,\n            attributes: [],\n        });\n    }\n\n    addAggregation() {\n        console.log(\"Add Aggregation...\");\n        this.target.aggregations.push({\n            type: null\n        });\n        console.log(\"Add done..\");\n    }\n\n\n    onChangeInternal() {\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    }\n}\n\nPredixTimeSeriesDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}