{"version":3,"sources":["../src/datasource.js"],"names":["angular","_","dateMath","kbn","PredixTimeSeriesDatasource","instanceSettings","$q","backendSrv","$timeout","$http","templateSrv","type","url","name","q","http","uaaTokenCache","tsURL","jsonData","predixZoneId","uaacURL","clientData","uaacType","uaacGrantType","uaac_origin","expand","console","log","fetchToken","then","datasourceRequest","data","method","headers","uaacToken","response","mapToTextValue","results","metricName","query","JSON","stringify","result","Object","keys","tags","attributes","attributeName","each","elem","push","mapToTextAndType","map","d","i","text","expandable","options","targets","filter","target","aQuery","deferred","defer","request","fullQuery","tag","tagName","targetAlias","length","a_metric","datapoints","values","timeseries","newseries","resolve","error","promise","reject","now","Date","checkTime","getTime","uaacTokenType","expiresDTTM","clientID","split","clientSecret","payload","encodeURI","btoa","access_token","token_type","uaacExpires","expires_in","timeObject","aToken","getUAAToken","pendingQueries","predixTSCalls","forEach","SinglePredixTimeSeriesQuery","all","errors","updates","update","queries","when","metric","hide","limit","maxDataPoints","start","range","from","valueOf","end","to","undefined","attribute","value","filters","alias","predixQueries","first","MultiplePredixTimeSeriesQueries","status","message","title"],"mappings":"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","file":"datasource.js","sourcesContent":["import angular from \"angular\";\nimport _ from \"lodash\";\nimport dateMath from \"app/core/utils/datemath\";\nimport kbn from \"app/core/utils/kbn\";\n\nexport class PredixTimeSeriesDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, $timeout, $http, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.http = $http;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        // the uaa token is stored here in the model\n        this.uaaTokenCache = [];\n        // these attributes are pulled from the datasource definition ui\n        this.tsURL = instanceSettings.jsonData.tsURL;\n        this.predixZoneId = instanceSettings.jsonData.predixZoneId;\n        this.uaacURL = instanceSettings.jsonData.uaacURL;\n        this.clientData = instanceSettings.jsonData.clientData;\n        this.uaacType = instanceSettings.jsonData.uaacType;\n        this.uaacGrantType = instanceSettings.jsonData.uaacGrantType;\n        this.uaac_origin = instanceSettings.jsonData.uaac_origin;\n        this.expand = true;\n        console.log(\"predix time series datasource constructor finished\");\n    }\n\n    // Required for hints\n    getMetrics() {\n        return this.fetchToken().then(() => {\n            return this.backendSrv.datasourceRequest({\n                url: this.tsURL + '/v1/tags',\n                data: '',\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + this.uaaTokenCache.uaacToken,\n                    'Predix-Zone-Id': this.predixZoneId,\n                    'Access-Control-Allow-Origin': this.uaac_origin\n                }\n            }).then((response) => {\n                return this.mapToTextValue(response.data.results);\n            });\n        });\n    }\n\n    getAttributesForMetric(metricName) {\n\n        return this.fetchToken().then(() => {\n            var query = {\n                \"start\": \"1d-ago\",\n                \"end\": \"1s-ago\",\n                \"tags\": [{\n                    \"name\": [metricName]\n                }]\n            };\n            return this.backendSrv.datasourceRequest({\n                url: this.tsURL + '/v1/datapoints',\n                data: JSON.stringify(query),\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + this.uaaTokenCache.uaacToken,\n                    'Predix-Zone-Id': this.predixZoneId,\n                    'Access-Control-Allow-Origin': this.uaac_origin\n                }\n            }).then((result) => {\n                return this.mapToTextValue(Object.keys(result.data.tags[0].results[0].attributes));\n            });\n        });\n    }\n\n    getAttributeValues(metricName, attributeName) {\n        return this.fetchToken().then(() => {\n            var query = {\n                \"start\": \"1d-ago\",\n                \"end\": \"1s-ago\",\n                \"tags\": [{\n                    \"name\": [metricName]\n                }]\n            };\n            return this.backendSrv.datasourceRequest({\n                url: this.tsURL + '/v1/datapoints',\n                data: JSON.stringify(query),\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + this.uaaTokenCache.uaacToken,\n                    'Predix-Zone-Id': this.predixZoneId,\n                    'Access-Control-Allow-Origin': this.uaac_origin\n                }\n            }).then((result) => {\n                return this.mapToTextValue(result.data.tags[0].results[0].attributes[attributeName]);\n            });\n        });\n    }\n\n    getAggregations() {\n        return this.fetchToken().then(() => {\n            return this.backendSrv.datasourceRequest({\n                url: this.tsURL + '/v1/aggregations',\n                data: '',\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + this.uaaTokenCache.uaacToken,\n                    'Predix-Zone-Id': this.predixZoneId,\n                    'Access-Control-Allow-Origin': this.uaac_origin\n                }\n            }).then((response) => {\n                var data = [];\n                _.each(response.data.results, (elem) => {\n                    data.push({\n                        name: elem.type,\n                        type: elem.name\n                    });\n                });\n                return this.mapToTextAndType(data);\n            });\n        });\n    }\n\n    mapToTextValue(results) {\n        return _.map(results, (d, i) => {\n            return {\n                text: d,\n                expandable: true\n            };\n        });\n    }\n\n    mapToTextAndType(result) {\n        return _.map(result, function (d, i) {\n            return {\n                text: d.name,\n                expandable: false,\n                type: d.type\n            };\n        });\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, function (target) {\n            return target.target !== 'select metric';\n        });\n        return options;\n    }\n\n    // Since we are limited on the amount of data that can be returned,\n    // each metric gets its own query for maximum results\n    SinglePredixTimeSeriesQuery(aQuery) {\n        var deferred = this.q.defer();\n        var request = this.backendSrv.datasourceRequest({\n            url: this.tsURL + '/v1/datapoints',\n            data: JSON.stringify(aQuery.fullQuery),\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.uaaTokenCache.uaacToken,\n                'Predix-Zone-Id': this.predixZoneId,\n                'Access-Control-Allow-Origin': this.uaac_origin\n            }\n        }).then(function (result) {\n            // we always get one tag back\n            var tag = result.data.tags[0];\n            var tagName = tag.name;\n            if ((typeof aQuery.targetAlias !== 'undefined') && (aQuery.targetAlias.length > 0)) {\n                tagName = aQuery.targetAlias;\n            }\n            // construct the response\n            var a_metric = {\n                target: tagName,\n                datapoints: []\n            };\n            // add in the datapoints, picking the correct fields\n            // predix has a \"quality\" field that is ignored\n            _.each(tag.results[0].values, function (timeseries) {\n                var newseries = [timeseries[1], timeseries[0]];\n                a_metric.datapoints.push(newseries);\n            });\n            return a_metric;\n        })\n            .then(function (response) {\n                deferred.resolve(response);\n            }, function (error) {\n                console.error(error);\n            });\n        return deferred.promise;\n    }\n\n\n    getUAAToken() {\n        return this.q((resolve, reject) => {\n            var now = new Date();\n            var checkTime = new Date(now.getTime() + 1000 * 30);\n            if (typeof this.uaaTokenCache.uaacTokenType === 'undefined' ||\n                (typeof this.uaaTokenCache.expiresDTTM !== 'undefined' &&\n                    this.uaaTokenCache.expiresDTTM < checkTime)) {\n                var clientID = this.clientData.split(\":\")[0];\n                var clientSecret = this.clientData.split(\":\")[1];\n                var payload = encodeURI(\"client_id=\" + clientID +\n                    \"&client_secret=\" + clientSecret +\n                    \"&response_type=token&grant_type=client_credentials\");\n                this.backendSrv.datasourceRequest({\n                    method: 'POST',\n                    url: this.uaacURL,\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                        'Authorization': 'Basic ' + btoa(this.clientData),\n                    },\n                    data: payload\n                }).then(\n                    (response) => {\n                        this.uaaTokenCache = [];\n                        this.uaaTokenCache.uaacToken = response.data.access_token;\n                        this.uaaTokenCache.uaacTokenType = response.data.token_type;\n                        this.uaaTokenCache.uaacExpires = response.data.expires_in;\n                        var timeObject = new Date();\n                        //set the time and date that this token expires\n                        timeObject = new Date(timeObject.getTime() + 1000 * response.data.expires_in);\n                        this.uaaTokenCache.expiresDTTM = timeObject;\n                        // console.log(\"Got a new token!\");\n                        // console.log($scope.datasource.uaaTokenCache);\n                        resolve(this.uaaTokenCache);\n                    },\n                    (error) => {\n                        console.log(\"Failed to get a token: \" + error);\n                        resolve(\"error\");\n                    });\n            } else {\n                // console.log(\"we have a good token...\");\n                resolve(this.uaaTokenCache);\n            }\n        });\n    }\n\n    fetchToken() {\n\n\n        // TODO: check if we already have a token and the expiration time is good\n        return this.q((resolve, reject) => {\n            var aToken = this.getUAAToken();\n            aToken.then((response) => {\n                resolve();\n            });\n        });\n    }\n\n    MultiplePredixTimeSeriesQueries(pendingQueries) {\n        var deferred = this.q.defer();\n        var predixTSCalls = [];\n        angular.forEach(pendingQueries, (aQuery) => {\n            predixTSCalls.push(this.SinglePredixTimeSeriesQuery(aQuery));\n        });\n        this.q.all(predixTSCalls)\n            .then(\n            (results) => {\n                var response = {\n                    data: []\n                };\n                angular.forEach(results, (result) => {\n                    response.data.push(result);\n                });\n                deferred.resolve(response);\n            },\n            (errors) => {\n                deferred.reject(errors);\n            },\n            (updates) => {\n                deferred.update(updates);\n            }\n            );\n        return deferred.promise;\n    }\n\n    // Called once per panel (graph)\n    query(options) {\n        // not needed since we are using suggest vs value?\n        // it isn't used anyways..\n        //var query = this.buildQueryParameters(options);\n\n        var queries = [];\n        if (options.targets.length <= 0) {\n            return this.q.when({\n                data: []\n            });\n        }\n        if (typeof options.targets[0].metric === 'undefined') {\n            return this.q.when({\n                data: []\n            });\n        }\n        // the rest of this function is a promise\n        var deferred = this.q.defer();\n\n        // Iterate over each target and build our query, store inside\n        angular.forEach(options.targets, function (target) {\n            // there's no \"next\" option in here, so test and skip\n            if ((!target.hide) && (typeof target.metric !== 'undefined')) {\n                // placeholder while query is built\n                var aQuery = {\n                    \"start\": \"15s-ago\",\n                    \"end\": \"1s-ago\",\n                    \"tags\": [{\n                        \"name\": [\"placeholder\"]\n                    }]\n                };\n                aQuery.tags[0].name[0] = target.metric;\n                aQuery.tags[0].limit = options.maxDataPoints;\n                aQuery.start = options.range.from.valueOf();\n                aQuery.end = options.range.to.valueOf();\n                // now the filters\n                if (typeof target.attributes !== undefined) {\n                    // there are filters defined, loop through them\n                    var attributes = {};\n                    angular.forEach(target.attributes, function (attribute) {\n                        var name = attribute.name;\n                        var value = attribute.value;\n                        // if the value is empty, skip it\n                        if (value.length > 0) {\n                            //var aHash = {};\n                            //aHash[name] = value;\n                            //attribute_list.push(aHash);\n                            attributes[name] = value;\n                        }\n                    });\n                    if (attributes !== null) {\n                        // only add filters if some are defined\n                        aQuery.tags[0].filters = {};\n                        aQuery.tags[0].filters.attributes = attributes;\n                        console.log(aQuery);\n                    }\n                }\n                // Add the query and the target alias\n                // thhe alias will be used later for legend substitution if it is defined\n                queries.push({\n                    fullQuery: aQuery,\n                    targetAlias: target.alias\n                });\n            } else {\n                console.log(\"hidden or empty, not adding to query\");\n            }\n        });\n\n        // Check if there are any metrics to query (they can all be hidden, or none at all)\n        if (queries.length === 0) {\n            // console.log(\"no tags visible or specified, no data to fetch\");\n            deferred.resolve({\n                data: []\n            });\n            return deferred.promise;\n        }\n        this.fetchToken().then(() => {\n            var predixQueries = this.q.all({\n                first: this.MultiplePredixTimeSeriesQueries(queries),\n            });\n            predixQueries.then((results) => {\n                // return results from predix query\n                deferred.resolve(results.first);\n            });\n        });\n        return deferred.promise;\n    }\n\n    testDatasource() {\n        return this.fetchToken().then(() => {\n            return this.backendSrv.datasourceRequest({\n                url: this.tsURL + '/v1/tags',\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': this.uaaTokenCache.uaacToken,\n                    'Predix-Zone-Id': this.predixZoneId,\n                    'Access-Control-Allow-Origin': this.uaac_origin\n                }\n            }).then((response) => {\n                console.log(response);\n                if (response.status === 200) {\n                    return {\n                        status: \"success\",\n                        message: \"Data source is working\",\n                        title: \"Success\"\n                    };\n                }\n            });\n        });\n    }\n}\n"]}